using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using jlib;

namespace DSMlib
{
    public enum MathLibType
    {
        gpu,
        cpu
    }

    public class ParameterSetting
    {
        public static bool CuBlasEnable = true;

        public static string CORPUS = "../../../../../Data/corpus.txt";
        public static string EMB_FILE = "../../../../../Data/vec.txt";
        public static string DIC = @"../../../../../Data/features/wordlist";

        public static string FEAFILE = @"../../../../../Data/features/";

        public static string NCE_PROB_FILE = "../../../../../Data/train.logpD.s75"; //if NCE and probFile="_null_" then use uniform Prob(D), e.g., Prob(D) = 1/|D|
        public static int LOSS_REPORT = 1; //report loss 
        public static string reserved_settings = ""; //no use yet

        public static FeatureList featureList = new FeatureList();
        
        public static int BATCH_SIZE = 1024;
        public static int NTRIAL = 4;
        public static float PARM_GAMMA = 10;
        public static int MAX_ITER = 40;

        public static int srcShortTxtWinSize = 20;
        public static int tgtShortTxtWinSize = 1;

        public static string srcModelType = "CDSSM";
        public static string tgtModelType = "DSSM";

        public static string trainPairTokz = @"../../../../../Data/train.pair.tok.tsv";
        public static string trainPairTokzNew = "../../../../../Data/new.train.pair.tok.tsv";

        public static string l3gPath = @"../../../../../Data/features/l3g.txt";
        public static string docDoneFile = @"../../../../../Data/model/_DOC_DONE";


        public static int[] SOURCE_LAYER_DIM = { 500, 100 };
        public static float[] SOURCE_LAYERWEIGHT_SIGMA = { 0.1f, 0.1f };
        public static int[] SOURCE_ACTIVATION = { 1, 1 };
        public static int[] SOURCE_ARCH = { 1, 0 };
        public static int[] SOURCE_ARCH_WIND = { 3, 1 };
        

        public static int[] TARGET_LAYER_DIM = { 100 };
        public static float[] TARGET_LAYERWEIGHT_SIGMA = { 0.1f };
        public static int[] TARGET_ACTIVATION = { 1 };
        public static int[] TARGET_ARCH = { 0 };
        public static int[] TARGET_ARCH_WIND = { 1 };
        

        public static float BIAS_WEIGHT = 0;

        public static int FEATURE_DIMENSION_QUERY = 0;
        public static int FEATURE_DIMENSION_DOC = 0;

        public static string SHALLOW_SOURCE = "";
        public static string SHALLOW_TARGET = "";
        public static bool IS_SHALLOW = false;
        public static bool IS_SHAREMODEL = false;


        public static string QFILE = "../../../../../Data/train.20.src.seq.fea.bin";
        public static int Q_FEA_NORM = 0;

        public static string DFILE = "../../../../../Data/train.1.tgt.seq.fea.bin";
        public static int D_FEA_NORM = 0;

        public static string LFILE = "";

        public static bool ISVALIDATE = false;
        public static string VALIDATE_QFILE = "";
        public static string VALIDATE_DFILE = "";
        public static string VALIDATE_QDPAIR = "";
        public static string VALIDATE_PROCESS = "";
        /// <summary>
        /// If true, then VALIDATE_PROCESS only need MODEL to valid. Don't need VALIDATE_QFILE, VALIDATE_DFILE, and VALIDATE_QDPAIR anymore
        /// </summary>
        public static bool VALIDATE_MODEL_ONLY = false;


        public static bool ISSEED = false;
        public static string SEEDMODEL1 = "";
        public static string SEEDMODEL2 = "";
        public static string SEEDMODEL3 = "";
        public static string SEEDMODEL4 = "";
        public static bool NOTrain = false;

        public static bool MIRROR_INIT = false;
        public static int device = 0;

        public static MathLibType MATH_LIB = MathLibType.gpu;
        public static int BasicMathLibThreadNum = 128;
        /// <summary>
        /// set to be true to be able to load the old model format generated by the original DSSM training.
        /// note that we always save model in the new format regardless of this parameter.
        /// by default it is false, meaning loading model in the new format.
        /// </summary>
        public static bool LoadModelOldFormat = false;

        /// <summary>
        /// For backward-compatibility of input data format.
        /// Possible values are "BOW", "SEQ", or "".
        /// "BOW" is used by 
        /// </summary>
        public static string LoadInputBackwardCompatibleMode = string.Empty;

        public static float DSSMEpsilon = 0.00000001f;

        public static bool Denoising = false;

        /// <summary>
        /// set to be true to load feature values as int32
        /// by default it is false, meaning loading feature value as single float. 
        /// </summary>
        public static bool FeatureValueAsInt = false;

        public static int Linear_Mapping = 0;

        /// <summary>
        /// 
        /// </summary>
        public static bool UpdateBias = false;

        public static void LoadArgs(string conf_filename)
        {
            FileStream mstream = new FileStream(conf_filename, FileMode.Open, FileAccess.Read);
            StreamReader mreader = new StreamReader(mstream);
            while (!mreader.EndOfStream)
            {
                string[] cmds = mreader.ReadLine().Split('\t');
                if (cmds.Length < 2)
                {
                    continue;
                }
                if (cmds[0].Equals("CORPUS"))
                {
                    CORPUS = cmds[1];
                }
                if (cmds[0].Equals("EMB_FILE"))
                {
                    EMB_FILE = cmds[1];
                }
                if (cmds[0].Equals("FEA_LIST"))
                {
                    string feaList = cmds[1];
                    string[] feas = feaList.Split(new char[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);

                    if (feas.Contains("l3g"))
                    {
                        featureList.l3g = true;
                    }
                    if (feas.Contains("root"))
                    {
                        featureList.root = true;
                    }
                    if (feas.Contains("infl"))
                    {
                        featureList.infl = true;
                    }
                }
                //if (cmds[0].Equals("FEAFILE"))
                //{
                //    FEAFILE = cmds[1];
                //}

                if (cmds[0].Equals("LINEAR_MAPPING"))
                {
                    Linear_Mapping = int.Parse(cmds[1].Trim().ToUpper());
                }

                if (cmds[0].Equals("reserved_settings"))
                {
                    reserved_settings = cmds[1];
                }
                if (cmds[0].Equals("CUBLAS"))
                {
                    if (int.Parse(cmds[1]) == 1)
                    {
                        CuBlasEnable = true;
                    }
                    else
                    {
                        CuBlasEnable = false;
                    }
                }

                if (cmds[0].Equals("NTRIAL"))
                {
                    NTRIAL = int.Parse(cmds[1]);
                }
                if (cmds[0].Equals("BATCHSIZE"))
                {
                    BATCH_SIZE = int.Parse(cmds[1]);
                }
                if (cmds[0].Equals("PARM_GAMMA"))
                {
                    PARM_GAMMA = float.Parse(cmds[1]);
                }               
                if (cmds[0].Equals("MAX_ITER"))
                {
                    MAX_ITER = int.Parse(cmds[1]);
                }
                if (cmds[0].Equals("SHALLOW_SOURCE"))
                {
                    SHALLOW_SOURCE = cmds[1];
                    IS_SHALLOW = true;
                }
                if (cmds[0].Equals("SHALLOW_TARGET"))
                {
                    SHALLOW_TARGET = cmds[1];
                    IS_SHALLOW = true;
                }
                if (cmds[0].Equals("DEVICE"))
                {
                    device = int.Parse(cmds[1]);
                    Cudalib.CudaSetDevice(device);
                }

                if (cmds[0].Equals("LFILE"))
                {
                    LFILE = cmds[1];
                }
                if (cmds[0].Equals("LEARNINGRATE"))
                {
                    LearningParameters.lr_begin = float.Parse(cmds[1]);
                    LearningParameters.lr_mid = float.Parse(cmds[1]);
                    LearningParameters.lr_latter = float.Parse(cmds[1]);
                    LearningParameters.learning_rate = float.Parse(cmds[1]);
                }
                if (cmds[0].Equals("SEEDMODEL1"))
                {
                    SEEDMODEL1 = cmds[1];
                    ISSEED = true;
                    //NOTrain = true;
                }
                if (cmds[0].Equals("SEEDMODEL2"))
                {
                    SEEDMODEL2 = cmds[1];
                    ISSEED = true;
                    //NOTrain = true;
                }
                if (cmds[0].Equals("SEEDMODEL3"))
                {
                    SEEDMODEL3 = cmds[1];
                    ISSEED = true;
                }
                if (cmds[0].Equals("SEEDMODEL4"))
                {
                    SEEDMODEL4 = cmds[1];
                    ISSEED = true;
                }
                if (cmds[0].Equals("SOURCE_LAYER_DIM"))
                {
                    string[] items = cmds[1].Split(',');
                    SOURCE_LAYER_DIM = new int[items.Length];
                    int i = 0;
                    foreach (string s in items)
                    {
                        SOURCE_LAYER_DIM[i] = int.Parse(s);
                        i++;
                    }
                }

                if (cmds[0].Equals("TARGET_LAYER_DIM"))
                {
                    string[] items = cmds[1].Split(',');
                    TARGET_LAYER_DIM = new int[items.Length];
                    int i = 0;
                    foreach (string s in items)
                    {
                        TARGET_LAYER_DIM[i] = int.Parse(s);
                        i++;
                    }
                }           
                if (cmds[0].Equals("VALIDATEQFILE"))
                {
                    VALIDATE_QFILE = cmds[1];
                }
                if (cmds[0].Equals("VALIDATEDFILE"))
                {
                    VALIDATE_DFILE = cmds[1];
                }
                if (cmds[0].Equals("VALIDATEPAIR"))
                {
                    VALIDATE_QDPAIR = cmds[1];
                }
                if (cmds[0].Equals("VALIDATEPROCESS"))
                {
                    VALIDATE_PROCESS = cmds[1];
                    ISVALIDATE = true;
                }
                if (cmds[0].Equals("VALIDATE_MODEL_ONLY"))
                {
                    if (int.Parse(cmds[1]) == 1)
                    {
                        VALIDATE_MODEL_ONLY = true;
                    }
                    else
                    {
                        VALIDATE_MODEL_ONLY = false;
                    }
                }
                if (cmds[0].Equals("EVULATIONEXE"))
                {
                    EVULATION_EXE = cmds[1];
                }
                if (cmds[0].Equals("LOAD_MODEL_OLD_FORMAT"))
                {
                    if (!bool.TryParse(cmds[1], out LoadModelOldFormat))
                    {
                        LoadModelOldFormat = cmds[1].Trim().Equals("1");
                    }
                }
                if (cmds[0].Equals("LOAD_INPUT_BACKWARD_COMPATIBLE_MODE"))
                {
                    if (cmds[1].Equals("BOW", StringComparison.OrdinalIgnoreCase))
                    {
                        LoadInputBackwardCompatibleMode = "BOW";
                        FeatureValueAsInt = true;
                    }
                    else if (cmds[1].Equals("SEQ", StringComparison.OrdinalIgnoreCase))
                    {
                        LoadInputBackwardCompatibleMode = "SEQ";
                        FeatureValueAsInt = true;
                    }                    
                }                
                if (cmds[0].Equals("FEATURE_VALUE_AS_INT"))
                {
                    if (!bool.TryParse(cmds[1], out FeatureValueAsInt))
                    {
                        FeatureValueAsInt = cmds[1].Trim().Equals("1");
                    }
                }
                if (cmds[0].Equals("MATH_LIB"))
                {
                    if (cmds[1].Trim().ToUpper() == "CPU")
                    {
                        MATH_LIB = MathLibType.cpu;
                    }
                    else
                    {
                        MATH_LIB = MathLibType.gpu;
                    }
                }
                if (cmds[0].Equals("CPU_MATH_LIB_THREAD_NUM"))
                {
                    ParameterSetting.BasicMathLibThreadNum = int.Parse(cmds[1]);
                    if (ParameterSetting.BasicMathLibThreadNum < 1)
                    {
                        throw new Exception("Error! CPU_MATH_LIB_THREAD_NUM should be >= 1");
                    }
                }
                if (cmds[0].Equals("RANDOM_SEED"))
                {
                    RANDOM_SEED = int.Parse(cmds[1]);
                    if (RANDOM_SEED >= 0) PSEUDO_RANDOM = true;
                    else                  PSEUDO_RANDOM = false;
                }
            }
            if (PSEUDO_RANDOM)
            {
                Random = new Random(RANDOM_SEED);
            }
            else
            {
                Random = new Random();
            }
            mreader.Close();
            mstream.Close();

            InflModel.wordListPath = DIC;
            InflModel.infl2oriPath = FEAFILE + "infl2ori.txt";
            InflModel.oriListpath = FEAFILE + "oriList.txt";
            RootModel.rootListpath = FEAFILE + "rootList.txt";
            RootModel.word2rootsPath = FEAFILE + "word2roots.txt";

            Console.WriteLine(CORPUS);
        }

        public static string EVULATION_EXE = @"";
        public static string MODEL_PATH = @"../../../../../Data/model\";
        public static string Log_FileName = @"../../../../../Data/model\log.txt";

        public static bool PSEUDO_RANDOM = true;
        //public static int[] RANDOM_SEED = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        public static int RANDOM_SEED = 13;
        public static Random Random = null;
        
        public static bool DEBUG = false;
        public static int DEBUG_TRAIN_NUM = 20480000;
        public static int DEBUG_BATCH_NUM = 100;
    }
}
